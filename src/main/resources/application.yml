game:
  gameToGenerate: 10

server:
  port: ${PORT:8000} # Deploy platforma (npr. Heroku, Render) postaviÄ‡e PORT

resilience4j:
  retry:
    instances:
      gameController:
        maxAttempts: 5
        waitDuration: 500ms
        retryExceptions:
          - org.springframework.web.client.HttpServerErrorException

  rate-limiter:
    instances:
      gameController:
        limitForPeriod: 10
        limitForPeriodInMillis: 1000
        limitRefreshPeriod: 1000

cors:
  allowed:
    origins: ${CORS_ALLOWED_ORIGINS:https://plane-rykl.onrender.com} # ðŸ‘ˆ Ovde stavi frontend domen

logging:
  pattern:
    level: "%5p [traceId=%X{traceId}, spanId=%X{spanId}]"

spring:

  application:
    name: skyrift

  datasource:
    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:skyrift}
    username: ${DB_USERNAME:postgres}
    password: ${DB_PASSWORD:wowlg147}
    driver-class-name: org.postgresql.Driver

  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect

  redis:
    host: ${REDIS_HOST:localhost}
    port: ${REDIS_PORT:6379}

  rsocket:
    server:
      host: ${R_SOCKET_HOST:0.0.0.0} # ðŸ‘ˆ u produkciji koristi 0.0.0.0, da prihvata spoljne konekcije
      mapping-path: /
      transport: websocket
      port: ${R_SOCKET_PORT:9000}
